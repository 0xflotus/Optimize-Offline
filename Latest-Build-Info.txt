## 3.0.7.4 ## (03-01-2018)

- The removal of System Applications, OnDemand Packages and Optional Features are determined by whether or not they are present in the editable array variables and are no longer controlled with switches.
- In order to prevent them from running completely, you can comment out the variable with a # right before '[string[]]'.
- The only exception is the AppWhiteList, which is enabled by using its respective switch when calling the script.
- This was changed to reduce the amount of switch requirements, and because using a switch while also having to edit a variable are counter-productive.  As such, one can comment out or uncomment out/add what they require and the script will rely on a simple check of the array contents when processing.

- Multiple overly-sensitive registry settings have been removed, primarily those that dealt with locking down system and store apps, which could reduce functionality on manufactured devices that rely on their personal software and apps to interact across the hardware of a device.

- Combined multiple separate processes into a parent process to prevent reduntant processes taking place like registry hive loading and unloading.

--------------------------------------------------------------------------------------------------------------------------------


## 3.0.7.3 ## (02-27-18)

- Made some changes to operational variables to further filter unsupported builds.

- Severely reduced the amount of services set to be disabled during start-up in order to give more flexibility to those also running online optimization tools and scripts.

- Improved driver injection package detection.

--------------------------------------------------------------------------------------------------------------------------------


## 3.0.7.2 ## (02-17-18)

- After running the script through SAPIEN, logging its performance, it was clear there was an enormous process overhead with the registry optimizations whilst using the Powershell cmdlets (similar to using repetitive "Try/Catch" blocks).  Because of this, the script run times were unacceptable.

- To remedy this, many registry values have been reverted back to their legacy strings.  The only exceptions are those large registry entries where looping can be utilized (ForEach).

- The script now processes extremely quickly and the outfile WIM loads very quickly, too.

- The -AddDrivers switch has been re-added, so drivers can now be injected into the WIM file.

--------------------------------------------------------------------------------------------------------------------------------

## 3.0.7.1 ## (02-11-18)

The Assorted-Features secondary function script has been removed temporarily as it's being merged into the full project (v4.0) that will be released within a few weeks.

A few registry settings' values were changed; a handful were removed and syntax on service removal was modified.

Changed some variables and function names to reflect the proper Powershell verb list.

--------------------------------------------------------------------------------------------------------------------------------

## 3.0.6 ## (02-07-18)

Assorted code changes.
Removed a registry entry that would occasionally cause a hang during the installation of the image.
Optimized the various processes.
Increased mounting speed.

--------------------------------------------------------------------------------------------------------------------------------

## 3.0.5 ## (02-05-18)

Some minor registry settings have been made

Made a few modifications to the cleaning-up of a current mount point and script termination.

This is an extremely minor update to accommodate the new -Local switch a bit better.

--------------------------------------------------------------------------------------------------------------------------------

## 3.0.4 ## (02-03-18)

The registry tweaks have been rewritten to use PowerShell's native cmdlet, as well as a small function I made to create the required keys.

A -Local switch has been added which will use the root path of the script ($PSScriptRoot) as the location it will mount and save the images to.

This switch was added for those who do not want to use a primary SSD and would rather use a secondary HDD.

Be warned that meddling in any of the temporary directories while the script is processing will likely corrupt the image, so it's best to leave them alone.

The Additional-Features function parameters were changed from a string to a hashtable for easier on/off switching.

The help information was cleaned up and more was included to detail what the functions do.

Additional registry tweaks were added for performance and speed; likewise, a few more security-related values were also added.

I am implementing a handful of advanced features for v4.0, which will be released as a full project.  All the cmdlets and modules for it are complete; I'm just finishing up some C# code that will be wrapped in it, too.

--------------------------------------------------------------------------------------------------------------------------------

## Version 3.0.3 ## (02-01-2018)

Minor processing adjustments have been made to clean-up some redundant or unnecessary code.

Improved the validity script for resolvable paths to ensure they meet the criteria required for the script to successfully run.

Added more detailed notes to further detail exactly what certain advanced functions and/or processes are doing.

Improved the Additional-Features function script in how it detected path types, added a few additional context menu additions and optimized some of the code that it generates for certain switches.

Cleaned up the help files and parameter/switch notes and information.

Changed the -AddFeatures switch to -AdditionalFeatures, as some were assuming the former switch was for adding features much like the -RemoveFeatures switch removes them.

--------------------------------------------------------------------------------------------------------------------------------

## Version 3.0 ## (01-30-2018)

Version 3.0 has been released and includes some significant updates, changes and modifications.

The Helper-Script.ps1 has been removed.

There's a new function that allows for ownership of registry keys and subkeys to be granted to the BUILTIN\Administrator account, using Access Token privileges.

There are additional services and drivers disabled through the offline registry hives.

There are additional notes with some pertinent information regarding Provisioning Application Packages and System Applications.

Re-wrote the process where System Applications are "de-provisioned" and removed.

Added additional security registry settings.

The Additional-Features function script has been almost entirely re-written.

Now values are applied directly to the offline registry hives as opposed to using "REGEDIT /S" via OOBE.cmd

OOBE.cmd is now omitted, as it's no longer required with the elevated registry function.

The Windows 10 Enterprise LTSB 2016 Calculator (Win32Calc) is now able to be applied to the image. This is valuable if the regular calculator Provisioning Application Package is removed yet one still wants a built-in calculator.

A -SysPrep switch has been added that will auto-boot the image into Audit System for System Preparation.

A -GenuineTicket switch has been added that will apply a GenuineTicket.xml to the image for automatic activation upon installation.

And -Unattend switch has been added that will apply a custom unattend.xml to the image.

Generated scripts have been tweaked and modified to omit versions of Windows prior to Windows 10.

There's additional checking to ensure the build being optimized is supported (currently, there's no support for Insider Updates).
